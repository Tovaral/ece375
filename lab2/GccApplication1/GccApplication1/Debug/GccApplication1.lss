
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000136  000001aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000136  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001aa  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000030  00000000  00000000  000001da  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000240  00000000  00000000  0000020a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000011a  00000000  00000000  0000044a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000001f2  00000000  00000000  00000564  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000044  00000000  00000000  00000758  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001ba  00000000  00000000  0000079c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000090  00000000  00000000  00000956  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000038  00000000  00000000  000009e6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	0f d0       	rcall	.+30     	; 0xb8 <main>
  9a:	4b c0       	rjmp	.+150    	; 0x132 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <left_whisker_hit>:
        }
    }
}

int left_whisker_hit() {
    return ~PIND & 2;
  9e:	80 b3       	in	r24, 0x10	; 16
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	80 95       	com	r24
  a4:	90 95       	com	r25
}
  a6:	82 70       	andi	r24, 0x02	; 2
  a8:	99 27       	eor	r25, r25
  aa:	08 95       	ret

000000ac <right_whisker_hit>:

int right_whisker_hit() {
    return ~PIND & 1;
  ac:	90 b3       	in	r25, 0x10	; 16
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	89 27       	eor	r24, r25
}
  b2:	81 70       	andi	r24, 0x01	; 1
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	08 95       	ret

000000b8 <main>:
#include <stdio.h>

int main(void)
{
	// data direction register. 1 is output. 0 is input.
    DDRB =  0b11110000;    //Setup Port B for Input/Output
  b8:	80 ef       	ldi	r24, 0xF0	; 240
  ba:	87 bb       	out	0x17, r24	; 23
	DDRD =  0;             //Setup Port D for Input/Output
  bc:	11 ba       	out	0x11, r1	; 17
	PORTD = 0b11111111;     // Activate pull up resistor
  be:	9f ef       	ldi	r25, 0xFF	; 255
  c0:	92 bb       	out	0x12, r25	; 18
    PORTB = 0b11110000;    //Turn off both motors
  c2:	88 bb       	out	0x18, r24	; 24


    PORTB = 0b01100000;    //Make TekBot move forward
  c4:	80 e6       	ldi	r24, 0x60	; 96
  c6:	88 bb       	out	0x18, r24	; 24
            _delay_ms(1000);
            PORTB = 0b01100000;    //Make TekBot move forward
        } else if (right_whisker_hit()) {
            PORTB = 0b00000000;    //Reverse
            _delay_ms(1000);
            PORTB = 0b01000000;    //Turn Right
  c8:	10 e4       	ldi	r17, 0x40	; 64
            _delay_ms(1000);
            PORTB = 0b01100000;    //Make TekBot move forward
  ca:	c0 e6       	ldi	r28, 0x60	; 96
   while (1) // Loop Forever
    {
        if (left_whisker_hit()) {
            PORTB = 0b00000000;    //Reverse
            _delay_ms(1000);
            PORTB = 0b00100000;    //Turn Left
  cc:	d0 e2       	ldi	r29, 0x20	; 32


    PORTB = 0b01100000;    //Make TekBot move forward
   while (1) // Loop Forever
    {
        if (left_whisker_hit()) {
  ce:	e7 df       	rcall	.-50     	; 0x9e <left_whisker_hit>
  d0:	89 2b       	or	r24, r25
  d2:	b1 f0       	breq	.+44     	; 0x100 <main+0x48>
            PORTB = 0b00000000;    //Reverse
  d4:	18 ba       	out	0x18, r1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d6:	2f ef       	ldi	r18, 0xFF	; 255
  d8:	83 ed       	ldi	r24, 0xD3	; 211
  da:	90 e3       	ldi	r25, 0x30	; 48
  dc:	21 50       	subi	r18, 0x01	; 1
  de:	80 40       	sbci	r24, 0x00	; 0
  e0:	90 40       	sbci	r25, 0x00	; 0
  e2:	e1 f7       	brne	.-8      	; 0xdc <main+0x24>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <main+0x2e>
  e6:	00 00       	nop
            _delay_ms(1000);
            PORTB = 0b00100000;    //Turn Left
  e8:	d8 bb       	out	0x18, r29	; 24
  ea:	2f ef       	ldi	r18, 0xFF	; 255
  ec:	83 ed       	ldi	r24, 0xD3	; 211
  ee:	90 e3       	ldi	r25, 0x30	; 48
  f0:	21 50       	subi	r18, 0x01	; 1
  f2:	80 40       	sbci	r24, 0x00	; 0
  f4:	90 40       	sbci	r25, 0x00	; 0
  f6:	e1 f7       	brne	.-8      	; 0xf0 <main+0x38>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <main+0x42>
  fa:	00 00       	nop
            _delay_ms(1000);
            PORTB = 0b01100000;    //Make TekBot move forward
  fc:	c8 bb       	out	0x18, r28	; 24
  fe:	e7 cf       	rjmp	.-50     	; 0xce <main+0x16>
        } else if (right_whisker_hit()) {
 100:	d5 df       	rcall	.-86     	; 0xac <right_whisker_hit>
 102:	89 2b       	or	r24, r25
 104:	21 f3       	breq	.-56     	; 0xce <main+0x16>
            PORTB = 0b00000000;    //Reverse
 106:	18 ba       	out	0x18, r1	; 24
 108:	2f ef       	ldi	r18, 0xFF	; 255
 10a:	83 ed       	ldi	r24, 0xD3	; 211
 10c:	90 e3       	ldi	r25, 0x30	; 48
 10e:	21 50       	subi	r18, 0x01	; 1
 110:	80 40       	sbci	r24, 0x00	; 0
 112:	90 40       	sbci	r25, 0x00	; 0
 114:	e1 f7       	brne	.-8      	; 0x10e <main+0x56>
 116:	00 c0       	rjmp	.+0      	; 0x118 <main+0x60>
 118:	00 00       	nop
            _delay_ms(1000);
            PORTB = 0b01000000;    //Turn Right
 11a:	18 bb       	out	0x18, r17	; 24
 11c:	2f ef       	ldi	r18, 0xFF	; 255
 11e:	83 ed       	ldi	r24, 0xD3	; 211
 120:	90 e3       	ldi	r25, 0x30	; 48
 122:	21 50       	subi	r18, 0x01	; 1
 124:	80 40       	sbci	r24, 0x00	; 0
 126:	90 40       	sbci	r25, 0x00	; 0
 128:	e1 f7       	brne	.-8      	; 0x122 <main+0x6a>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <main+0x74>
 12c:	00 00       	nop
            _delay_ms(1000);
            PORTB = 0b01100000;    //Make TekBot move forward
 12e:	c8 bb       	out	0x18, r28	; 24
 130:	ce cf       	rjmp	.-100    	; 0xce <main+0x16>

00000132 <_exit>:
 132:	f8 94       	cli

00000134 <__stop_program>:
 134:	ff cf       	rjmp	.-2      	; 0x134 <__stop_program>
